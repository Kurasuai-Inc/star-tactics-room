name: 🌟 Star Constellation CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 💾 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f pyproject.toml ]; then pip install -e .; fi
        
    - name: 🧪 Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        
  lint-backend:
    name: 🔍 Backend Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        
    - name: ⚫ Check code formatting (Black)
      run: black --check src/ tests/ api/ data/
      
    - name: 📋 Check import sorting (isort)
      run: isort --check-only src/ tests/ api/ data/
      
    - name: 🔍 Lint with flake8
      run: flake8 src/ tests/ api/ data/
      
    - name: 🏷️ Type check with mypy
      run: mypy src/ || true  # Allow mypy failures for now
      
  test-api:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pytest httpx
        if [ -f pyproject.toml ]; then pip install -e .; fi
        
    - name: 🚀 Start API server
      run: |
        cd api
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: 🌐 Test API endpoints
      run: |
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/stats || exit 1
        
  build-docs:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
        
    - name: 📖 Build documentation
      run: |
        # mkdocs build --strict  # Enable when mkdocs.yml is created
        echo "Documentation build placeholder"
        
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON: true
        VALIDATE_PYTHON_BLACK: true
        
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend, test-api]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "🌟 Deploying Star Constellation to staging..."
        # Add deployment commands here
        
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend, test-api]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌟 Deploy to production
      run: |
        echo "🌌 Deploying Star Constellation to production..."
        # Add production deployment commands here